#! Become 2% of THE Django Developer
We will learn the most advanced topics of Backend development. Write Powerful Scalable code with proper test cases latest tech stack like Redis, Elastic Search, Kibana, Celery, Sockets etc.

#? Python 

1. Python is a high level programming language
2. Used in various applications like web development, Data Science, Machine Learning, AI, IoT, Game Development, Business Applications, etc.
3. Some companies that use python include Google, Amazon, Facebook, Netflix, Uber, etc.

#? Python Installation

1. For Windows: Download Python from https://www.python.org/downloads/ and keep all the default options along with Add to Path.
2. For Linux: sudo apt install python3
3. For MacOS: brew install python

#? Python2 vs Python3
1. Python2 is the legacy version of Python and Python3 is the latest version of Python.
2. Performance: Python3 is faster than Python2.
3. Backward compatibility: Python3 is backward compatible with Python2.
4. Libraries: Python3 has more libraries than Python2.

#? Python Operators
1. Arithmetic Operators: +, -, *, /, %, //, **
2. Assignment Operators: =, +=, -=, *=, /=, %=
3. Comparison Operators: ==, !=, >, <, >=, <=
4. Logical Operators: and, or, not
5. Identity Operators: is, is not
6. Membership Operators: in, not in
7. Bitwise Operators: &, |, ^, ~, <<, >>
8. Special Operators: lambda, yield

#? Python Conditions
1. if, elif, else
2. nested if
3. multiple conditions with and, or, not

#? Python Loops
1. for loop
2. while loop
3. break statement
4. continue statement
5. pass statement
6. Combination of break and continue statements

#? Python Data Structures
1. Lists - mutable ordered collection of elements
    * Attributes: len(), index()
    * Operations: append(), remove(), sort()
2. 2D Lists - lists containing other lists
    * Attributes: len() (for rows), len(matrix1) (for columns)
    * Operations: indexing, slicing, modifying elements
3. Dictionaries - key-value pairs
    * Attributes: keys(), values(), items()
    * Operations: add key-value pair, remove key
4. Tuples - immutable ordered collection of elements
    * Attributes: count(), index()
    * Operations: concatenation
5. Sets - unordered collection of unique elements
    * Operations: add(), remove(), check membership
6. Strings - sequence of characters
    * Operations: upper(), lower(), count(), startswith(), endswith(), replace()

#? Python Functions
1. Functions - basic function definition and call
2. Lambda functions - concise anonymous functions
3. Recursive functions - functions calling themselves
4. Default arguments - providing default values for function parameters
5. Keyword arguments - passing arguments by name
6. args and kwargs - handling variable number of positional and keyword arguments
7. Scope in Python - global variables, local variables, and modifying variables in enclosing scopes

#? Advanced Python - Object Oriented Programming
1. Classes and Objects - defining classes and creating instances
2. Class Attributes, Methods and variables - using class-level attributes and methods
3. Constructors - initializing objects with init method
4. Constructor Overloading - simulating constructor overloading (Python doesn't support true overloading)
5. Inheritance and Polymorphism - creating base and derived classes, demonstrating polymorphic behavior
6. Abstraction and Encapsulation - hiding internal details and protecting data
7. Static Methods and Class Methods - using @staticmethod and @classmethod decorators

#? Advanced Python - Threads
1. The problem that threads solve - concurrent execution of tasks which helps a program to perform multiple operations simultaneously rather than sequentially one after the other.
2. Creating threads with run(), start(), and join() methods.
3. Passing arguments to threads using lambda functions.
4. The difference between threads and processes (using multiprocessing).
5. The difference between run() and start() methods of threads. 
6. Creating threads using custom classes.
7. Create and solve real world example of downloading multiple images using threads -> Refer 09-python-threads-image-downloader.py

Key Differences between run(), start() and join() Methods:

a) Execution Context:
    * start() initiates the thread's execution.
    * run() defines what the thread does.
    * join() waits for the thread to finish.
b) Timing:
    * start() is typically called first, followed by join().    
    * run() is called automatically by start().
c) Blocking Nature:
    * start() is non-blocking.
    * join() is blocking, waiting for the thread to complete.
d) Return Value:
    * start() returns None.
    * run() doesn't return anything directly; its contents determine the output.
    * join() always returns None 3.

In summary, start() initiates the thread, run() defines its behavior, and join() ensures the main program waits for the thread to complete before continuing. Understanding these methods is crucial for proper thread management in Python.

* threading.current_thread().name is used to get the name of the current thread.
* threading.enumerate() returns a list of all currently active running threads.
* threading.get_ident() returns the unique identifier id of the current thread.